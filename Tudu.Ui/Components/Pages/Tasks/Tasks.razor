@page "/tasks"
@rendermode InteractiveServer
@attribute [Authorize]

@using System.Security.Claims
@using Tudu.Application.Dtos
@using Tudu.Application.Interfaces
@inject IUserTaskService UserTaskService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation
@inject SweetAlertService Swal;

<!-- Bootstrap Icons CDN -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css" rel="stylesheet">

<div class="tasks-shell">
    <!-- Header Section -->
    <header class="tasks-header">
        <h2>Your Tasks</h2>
        <div class="subtitle">Stay organized and productive</div>
        <div class="header-actions">
            <NavLink href="/tasks/create" class="btn-custom btn-primary-custom">
                <i class="bi bi-plus-lg"></i>
                Create Task
            </NavLink>
            @* <button class="btn-custom btn-outline-custom" @onclick="Refresh" title="Refresh tasks">
                <i class="bi bi-arrow-clockwise"></i>
                Refresh
            </button> *@
            @* <div class="filter-group">
                <label class="filter-label">Layout</label> *@
                <div class="layout-toggle">
                    <button class="layout-btn @(isGridLayout ? "active" : "")" 
                            @onclick="() => SetLayout(true)" 
                            title="Grid view"
                            aria-pressed="@isGridLayout">
                        <i class="bi bi-grid-3x3-gap"></i>
                    </button>
                    <button class="layout-btn @(!isGridLayout ? "active" : "")" 
                            @onclick="() => SetLayout(false)" 
                            title="List view"
                            aria-pressed="@(!isGridLayout)">
                        <i class="bi bi-list-ul"></i>
                    </button>
                @* </div> *@
            </div> 
        </div>
    </header>

    <!-- Controls Section -->
    <section class="tasks-controls" aria-label="Task filters and controls">
        <!-- Search Section -->
        @* <div class="search-section">
            <div class="search-wrapper">
                <i class="bi bi-search search-icon"></i>
                <input 
                    class="search-input" 
                    placeholder="Search tasks, descriptions..." 
                    @bind="searchTerm" 
                    @bind:event="oninput"
                    aria-label="Search tasks"
                />
                @if (!string.IsNullOrWhiteSpace(searchTerm))
                {
                    <button class="clear-search" @onclick="ClearSearch" title="Clear search" aria-label="Clear search">
                        <i class="bi bi-x"></i>
                    </button>
                }
            </div>
        </div> *@

        <!-- Filters Section -->
        <div class="filters-section">
            <!-- Status Filter -->
            <div class="filter-group">
                <label class="filter-label">Status</label>
                <div class="status-filters">
                    <button class="status-btn @(selectedStatus == StatusFilter.All ? "active" : "")" 
                            @onclick="() => SelectStatus(StatusFilter.All)"
                            aria-pressed="@(selectedStatus == StatusFilter.All)">
                        <i class="bi bi-list-task"></i>
                        All
                    </button>
                    <button class="status-btn @(selectedStatus == StatusFilter.Active ? "active" : "")" 
                            @onclick="() => SelectStatus(StatusFilter.Active)"
                            aria-pressed="@(selectedStatus == StatusFilter.Active)">
                        <i class="bi bi-circle"></i>
                        Active
                    </button>
                    <button class="status-btn @(selectedStatus == StatusFilter.Completed ? "active" : "")" 
                            @onclick="() => SelectStatus(StatusFilter.Completed)"
                            aria-pressed="@(selectedStatus == StatusFilter.Completed)">
                        <i class="bi bi-check-circle"></i>
                        Done
                    </button>
                </div>
            </div>

            <!-- Category Filter -->
            <div class="filter-group">
                <label class="filter-label">Category</label>
                <select class="select-input" @bind="selectedCategory" aria-label="Filter by category">
                    <option value="">All Categories</option>
                    @foreach (var category in Categories)
                    {
                        <option value="@category">@category</option>
                    }
                </select>
            </div>

            <!-- Sort Options -->
            <div class="filter-group">
                <label class="filter-label">Sort By</label>
                <select class="select-input" @bind="sortBy" aria-label="Sort tasks">
                    <option value="dueAsc">Due Date (Earliest)</option>
                    <option value="dueDesc">Due Date (Latest)</option>
                    <option value="titleAsc">Title (A-Z)</option>
                    <option value="titleDesc">Title (Z-A)</option>
                    <option value="createdDesc">Recently Created</option>
                </select>
            </div>

            <!-- Layout Toggle -->
            @* <div class="filter-group">
                <label class="filter-label">Layout</label>
                <div class="layout-toggle">
                    <button class="layout-btn @(isGridLayout ? "active" : "")" 
                            @onclick="() => SetLayout(true)" 
                            title="Grid view"
                            aria-pressed="@isGridLayout">
                        <i class="bi bi-grid-3x3-gap"></i>
                    </button>
                    <button class="layout-btn @(!isGridLayout ? "active" : "")" 
                            @onclick="() => SetLayout(false)" 
                            title="List view"
                            aria-pressed="@(!isGridLayout)">
                        <i class="bi bi-list-ul"></i>
                    </button>
                </div>
            </div> *@
        </div>

        <!-- Task Stats -->
        <div class="task-stats">
            <i class="bi bi-info-circle"></i>
            Showing <strong>@GetDisplayRange()</strong> of <strong>@FilteredCount</strong> tasks
        </div>
    </section>

    <!-- Main Content -->
    <main class="tasks-container" aria-live="polite" aria-label="Tasks list">
        @if (isLoading)
        {
            <div class="loading-state" role="status" aria-label="Loading tasks">
                <div class="loading-spinner"></div>
                Loading your tasks...
            </div>
        }
        else if (PaginatedTasks == null || !PaginatedTasks.Any())
        {
            <div class="empty-state">
                <div class="icon">
                    <i class="bi bi-inbox"></i>
                </div>
                <div class="title">
                    @if (FilteredCount == 0 && tasks?.Any() == true)
                    {
                        <text>No tasks match your filters</text>
                    }
                    else
                    {
                        <text>No tasks yet</text>
                    }
                </div>
                <div class="description">
                    @if (FilteredCount == 0 && tasks?.Any() == true)
                    {
                        <text>Try adjusting your search or filter criteria to find what you're looking for.</text>
                    }
                    else
                    {
                        <text>Create your first task to get started with organizing your work.</text>
                    }
                </div>
                @if (FilteredCount == 0 && tasks?.Any() == true)
                {
                    <button class="action" @onclick="ClearAllFilters">
                        <i class="bi bi-funnel"></i>
                        Clear Filters
                    </button>
                }
                else
                {
                    <NavLink href="/tasks/create" class="action">
                        <i class="bi bi-plus-lg"></i>
                        Create Your First Task
                    </NavLink>
                }
            </div>
        }
        else
        {
            <div class="tasks-grid @(isGridLayout ? "grid" : "list")" role="list" aria-label="Tasks">
                @foreach (var task in PaginatedTasks)
                {
                    <article class="task-card @(task.IsCompleted ? "completed" : "")" 
                             role="listitem" 
                             aria-label="Task: @task.Title">
                        
                        <div class="task-header">
                            <input type="checkbox" 
                                   class="task-checkbox" 
                                   checked="@task.IsCompleted" 
                                   @onchange="() => ToggleCompleted(task)" 
                                   aria-label="@(task.IsCompleted ? "Mark as incomplete" : "Mark as complete")"
                                   title="@(task.IsCompleted ? "Mark as incomplete" : "Mark as complete")" />
                            
                            <div class="task-content">
                                <h3 class="task-title">@task.Title</h3>
                                
                                <div class="task-meta">
                                    @if (!string.IsNullOrEmpty(task.Category))
                                    {
                                        <span class="meta-chip category-chip">
                                            <i class="bi bi-tag"></i>
                                            @task.Category
                                        </span>
                                    }
                                    <span class="meta-chip">
                                        <i class="bi bi-calendar3"></i>
                                        @task.DueDate.ToLocalTime().ToString("MMM dd, yyyy")
                                    </span>
                                    @if (task.HasReminder)
                                    {
                                        <span class="meta-chip">
                                            <i class="bi bi-bell-fill"></i>
                                            Reminder
                                        </span>
                                    }
                                    <span class="meta-chip">
                                        <i class="bi bi-clock"></i>
                                        @GetRelativeTime(task.CreatedAt)
                                    </span>
                                </div>
                                
                                @if (!string.IsNullOrWhiteSpace(task.Description))
                                {
                                    <div class="task-description">
                                        @GetTruncatedDescription(task.Description)
                                    </div>
                                }
                            </div>
                        </div>

                        <div class="task-actions">
                            <button class="action-btn primary" 
                                    @onclick="() => NavigateToEdit(task.Id)" 
                                    title="Edit task"
                                    aria-label="Edit @task.Title">
                                <i class="bi bi-pencil"></i>
                                
                            </button>
                            <button class="action-btn danger" 
                                    @onclick="() => DeleteTask(task.Id)" 
                                    title="Delete task"
                                    aria-label="Delete @task.Title">
                                <i class="bi bi-trash3"></i>
                                
                            </button>
                        </div>
                    </article>
                }
            </div>

            <!-- Pagination -->
            @if (TotalPages > 1)
            {
                <div class="pagination-wrapper">
                    <div class="pagination-info">
                        Page @currentPage of @TotalPages
                    </div>
                    <div class="pagination-controls">
                        <button class="page-btn" 
                                @onclick="FirstPage" 
                                disabled="@(currentPage <= 1)"
                                title="First page"
                                aria-label="Go to first page">
                            <i class="bi bi-chevron-double-left"></i>
                        </button>
                        <button class="page-btn" 
                                @onclick="PreviousPage" 
                                disabled="@(currentPage <= 1)"
                                title="Previous page"
                                aria-label="Go to previous page">
                            <i class="bi bi-chevron-left"></i>
                        </button>
                        
                        @foreach (var page in GetVisiblePageNumbers())
                        {
                            <button class="page-btn @(page == currentPage ? "active" : "")" 
                                    @onclick="() => GoToPage(page)"
                                    aria-label="Go to page @(page)"
                                    aria-current="@(page == currentPage ? "page" : null)">
                                @(page)
                            </button>
                        }
                        
                        <button class="page-btn" 
                                @onclick="NextPage" 
                                disabled="@(currentPage >= TotalPages)"
                                title="Next page"
                                aria-label="Go to next page">
                            <i class="bi bi-chevron-right"></i>
                        </button>
                        <button class="page-btn" 
                                @onclick="LastPage" 
                                disabled="@(currentPage >= TotalPages)"
                                title="Last page"
                                aria-label="Go to last page">
                            <i class="bi bi-chevron-double-right"></i>
                        </button>
                    </div>
                </div>
            }
        }
    </main>
</div>

@code {
    private IEnumerable<TaskReadDto>? tasks;
    private int userId;
    // private string? profilePicture;
    private string? userName;
    private bool isLoading = true;

    // UI state
    private string searchTerm = string.Empty;
    private StatusFilter selectedStatus = StatusFilter.All;
    private string selectedCategory = string.Empty;
    private string sortBy = "dueAsc";
    private bool isGridLayout = false;

    // Pagination
    private int currentPage = 1;
    private const int itemsPerPage = 2;

    // Computed properties
    private IEnumerable<TaskReadDto>? FilteredTasks => GetFilteredTasks();
    private int FilteredCount => FilteredTasks?.Count() ?? 0;
    private int TotalPages => (int)Math.Ceiling((double)FilteredCount / itemsPerPage);
    private IEnumerable<TaskReadDto>? PaginatedTasks => GetPaginatedTasks();
    private IEnumerable<string> Categories => tasks?
        .Select(t => (t.Category ?? string.Empty).Trim())
        .Where(c => !string.IsNullOrEmpty(c))
        .Distinct(StringComparer.OrdinalIgnoreCase)
        .OrderBy(c => c) ?? Enumerable.Empty<string>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            userId = int.Parse(user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? "0");
            // profilePicture = user.FindFirst("ProfilePicture")?.Value;
            userName = user.FindFirst(ClaimTypes.Name)?.Value;
            await LoadTasks();
        }
        isLoading = false;
    }

    private async Task LoadTasks()
    {
        tasks = await UserTaskService.GetUserTasksAsync(userId);
        // Reset to first page when tasks are reloaded
        currentPage = 1;
        StateHasChanged();
    }

    private IEnumerable<TaskReadDto>? GetFilteredTasks()
    {
        if (tasks == null) return Enumerable.Empty<TaskReadDto>();

        var query = tasks.AsEnumerable();

        // Search filter
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            var searchLower = searchTerm.Trim().ToLowerInvariant();
            query = query.Where(t => 
                (t.Title ?? "").ToLowerInvariant().Contains(searchLower) ||
                (t.Description ?? "").ToLowerInvariant().Contains(searchLower));
        }

        // Status filter
        switch (selectedStatus)
        {
            case StatusFilter.Active:
                query = query.Where(t => !t.IsCompleted);
                break;
            case StatusFilter.Completed:
                query = query.Where(t => t.IsCompleted);
                break;
        }

        // Category filter
        if (!string.IsNullOrWhiteSpace(selectedCategory))
        {
            query = query.Where(t => string.Equals(
                t.Category?.Trim(), 
                selectedCategory.Trim(), 
                StringComparison.OrdinalIgnoreCase));
        }

        // Sorting
        query = sortBy switch
        {
            "dueAsc" => query.OrderBy(t => t.DueDate),
            "dueDesc" => query.OrderByDescending(t => t.DueDate),
            "titleAsc" => query.OrderBy(t => t.Title),
            "titleDesc" => query.OrderByDescending(t => t.Title),
            "createdDesc" => query.OrderByDescending(t => t.CreatedAt),
            _ => query.OrderBy(t => t.DueDate)
        };

        return query;
    }

    private IEnumerable<TaskReadDto>? GetPaginatedTasks()
    {
        if (FilteredTasks == null) return Enumerable.Empty<TaskReadDto>();

        return FilteredTasks
            .Skip((currentPage - 1) * itemsPerPage)
            .Take(itemsPerPage);
    }

    private IEnumerable<int> GetVisiblePageNumbers()
    {
        const int visiblePages = 5;
        var pages = new List<int>();
        
        if (TotalPages <= visiblePages)
        {
            // Show all pages if total is small
            for (int i = 1; i <= TotalPages; i++)
            {
                pages.Add(i);
            }
        }
        else
        {
            // Show pages around current page
            int start = Math.Max(1, currentPage - 2);
            int end = Math.Min(TotalPages, currentPage + 2);
            
            // Adjust if we're near the beginning or end
            if (end - start < visiblePages - 1)
            {
                if (start == 1)
                    end = Math.Min(TotalPages, start + visiblePages - 1);
                else if (end == TotalPages)
                    start = Math.Max(1, end - visiblePages + 1);
            }
            
            for (int i = start; i <= end; i++)
            {
                pages.Add(i);
            }
        }
        
        return pages;
    }

    private string GetDisplayRange()
    {
        if (FilteredCount == 0) return "0";
        
        var start = (currentPage - 1) * itemsPerPage + 1;
        var end = Math.Min(currentPage * itemsPerPage, FilteredCount);
        
        if (start == end) return start.ToString();
        return $"{start}-{end}";
    }

    private string GetRelativeTime(DateTime dateTime)
    {
        var timeSpan = DateTime.UtcNow - dateTime.ToUniversalTime();
        
        if (timeSpan.TotalMinutes < 1) return "Just now";
        if (timeSpan.TotalMinutes < 60) return $"{(int)timeSpan.TotalMinutes}m ago";
        if (timeSpan.TotalHours < 24) return $"{(int)timeSpan.TotalHours}h ago";
        if (timeSpan.TotalDays < 7) return $"{(int)timeSpan.TotalDays}d ago";
        if (timeSpan.TotalDays < 30) return $"{(int)(timeSpan.TotalDays / 7)}w ago";
        
        return dateTime.ToLocalTime().ToString("MMM dd, yyyy");
    }

    private string GetTruncatedDescription(string description)
    {
        if (string.IsNullOrWhiteSpace(description)) return string.Empty;
        
         int maxLength = isGridLayout ? 120 : 200;
        if (description.Length <= maxLength) return description;
        
        return description.Substring(0, maxLength).TrimEnd() + "…";
    }

    // Event handlers
    private void ClearSearch()
    {
        searchTerm = string.Empty;
        currentPage = 1;
    }

    private void SelectStatus(StatusFilter status)
    {
        selectedStatus = status;
        currentPage = 1;
    }

    private void SetLayout(bool gridLayout)
    {
        isGridLayout = gridLayout;
    }

    private void ClearAllFilters()
    {
        searchTerm = string.Empty;
        selectedStatus = StatusFilter.All;
        selectedCategory = string.Empty;
        sortBy = "dueAsc";
        currentPage = 1;
    }

    private async Task Refresh()
    {
        isLoading = true;
        StateHasChanged();
        await LoadTasks();
        isLoading = false;
    }

    // Pagination methods
    private void FirstPage()
    {
        if (currentPage > 1)
        {
            currentPage = 1;
        }
    }

    private void LastPage()
    {
        if (currentPage < TotalPages)
        {
            currentPage = TotalPages;
        }
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
        }
    }

    private void NextPage()
    {
        if (currentPage < TotalPages)
        {
            currentPage++;
        }
    }

    private void GoToPage(int page)
    {
        if (page >= 1 && page <= TotalPages)
        {
            currentPage = page;
        }
    }

    private void NavigateToEdit(int taskId)
    {
        Navigation.NavigateTo($"/tasks/edit/{taskId}");
    }

    private async Task DeleteTask(int taskId)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Delete Task?",
            Text = "This action cannot be undone.",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            ConfirmButtonText = "Yes, delete it",
            CancelButtonText = "Cancel",
            ConfirmButtonColor = "#dc3545",
            CancelButtonColor = "#6c757d"
        });

        if (!string.IsNullOrEmpty(result.Value))
        {
            try
            {
                if (await UserTaskService.DeleteTaskAsync(taskId, userId))
                {
                    await LoadTasks();
                    
                    // Adjust current page if necessary
                    if (currentPage > TotalPages && TotalPages > 0)
                    {
                        currentPage = TotalPages;
                    }
                    
                    await Swal.FireAsync(
                        "Deleted!",
                        "Your task has been deleted.",
                        SweetAlertIcon.Success
                    );
                }
                else
                {
                    await Swal.FireAsync(
                        "Error",
                        "Failed to delete the task. Please try again.",
                        SweetAlertIcon.Error
                    );
                }
            }
            catch (Exception)
            {
                await Swal.FireAsync(
                    "Error",
                    "An error occurred while deleting the task.",
                    SweetAlertIcon.Error
                );
            }
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {
            await Swal.FireAsync(
                "Cancelled",
                "Your task is safe.",
                SweetAlertIcon.Info
            );
        }
    }

    private async Task ToggleCompleted(TaskReadDto task)
    {
        var updateDto = new TaskUpdateDto
        {
            Id = task.Id,
            Title = task.Title,
            Description = task.Description,
            DueDate = task.DueDate,
            Category = task.Category,
            IsCompleted = !task.IsCompleted,
            HasReminder = task.HasReminder,
            ReminderTime = task.ReminderTime
        };

        try
        {
            if (await UserTaskService.UpdateTaskAsync(updateDto, userId))
            {
                // Update the task in the local collection for immediate UI feedback
                if (tasks != null)
                {
                    var taskToUpdate = tasks.FirstOrDefault(t => t.Id == task.Id);
                    if (taskToUpdate != null)
                    {
                        taskToUpdate.IsCompleted = updateDto.IsCompleted;
                    }
                }
                StateHasChanged();
            }
        }
        catch (Exception)
        {
            // Handle error silently or show a small notification
            // For now, just refresh the tasks to ensure consistency
            await LoadTasks();
        }
    }

    private enum StatusFilter
    {
        All,
        Active,
        Completed
    }
}