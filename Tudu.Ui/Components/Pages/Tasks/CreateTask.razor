@page "/tasks/create"
@rendermode InteractiveServer
@attribute [Authorize]

@using System.Security.Claims
@using Tudu.Application.Dtos
@using Tudu.Application.Interfaces
@using FluentValidation
@inject IUserTaskService UserTaskService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation
@inject SweetAlertService Swal;

<div style="max-width:600px; margin: 5rem auto; background: var(--bg-card); padding: 2.5rem; border-radius: 16px; box-shadow: var(--shadow-lg); border: 1px solid var(--border-subtle);">
    <h3 style="color: var(--text-primary); margin-bottom: 2rem; text-align: center; font-weight: 600;">Create a New Task</h3>

    <EditForm Model="taskDto" OnValidSubmit="HandleValidSubmit" method="post" FormName="TaskForm">
        <FluentValidationValidator />
        <ValidationSummary style="color: var(--accent-danger); margin-bottom: 1.5rem; font-weight: 500;" />

        <!-- Title -->
        <div style="margin-bottom: 1.5rem;">
            <label style="color: var(--text-secondary); font-weight: 500; margin-bottom: 0.5rem; display: block; font-size: 0.95rem;">Title</label>
            <InputText @bind-Value="taskDto.Title"
                       style="background: var(--glass-bg); border: 1px solid var(--border-subtle); border-radius: 12px; padding: 0.875rem 1.25rem; color: var(--text-primary); font-size: 1rem; width: 100%;" />
        </div>

        <!-- Description -->
        <div style="margin-bottom: 1.5rem;">
            <label style="color: var(--text-secondary); font-weight: 500; margin-bottom: 0.5rem; display: block; font-size: 0.95rem;">Description</label>
            <InputTextArea @bind-Value="taskDto.Description"
                           style="background: var(--glass-bg); border: 1px solid var(--border-subtle); border-radius: 12px; padding: 0.875rem 1.25rem; color: var(--text-primary); font-size: 1rem; width: 100%; min-height: 100px; resize: vertical;" />
        </div>

        <!-- Due Date + Category -->
        <div style="display: flex; gap: 1rem; flex-wrap: wrap; margin-bottom: 2rem;">
            <div style="flex: 1;">
                <label style="color: var(--text-secondary); font-weight: 500; margin-bottom: 0.5rem; display: block; font-size: 0.95rem;">Due Date</label>
                <InputDate @bind-Value="taskDto.DueDate"
                           style="background: var(--glass-bg); border: 1px solid var(--border-subtle); border-radius: 12px; padding: 0.875rem 1.25rem; color: var(--text-primary); font-size: 1rem; width: 100%;" />
            </div>
            <div style="flex: 1;">
                <label style="color: var(--text-secondary); font-weight: 500; margin-bottom: 0.5rem; display: block; font-size: 0.95rem;">Category</label>
                <InputText @bind-Value="taskDto.Category"
                           style="background: var(--glass-bg); border: 1px solid var(--border-subtle); border-radius: 12px; padding: 0.875rem 1.25rem; color: var(--text-primary); font-size: 1rem; width: 100%;" />
            </div>
        </div>

        <!-- Reminder -->
        <div style="display: flex; align-items: center; gap: 0.75rem; margin-bottom: 2rem;">
            <InputCheckbox @bind-Value="taskDto.HasReminder" id="hasReminder" style="width: 18px; height: 18px; accent-color: var(--accent-primary); cursor: pointer;" />
            <label for="hasReminder" style="font-weight: 500; color: var(--text-primary); cursor: pointer;">Set a Reminder?</label>
        </div>

        @if (taskDto.HasReminder)
        {
            <div style="margin-bottom: 2rem;">
                <label style="color: var(--text-secondary); font-weight: 500; margin-bottom: 0.5rem; display: block; font-size: 0.95rem;">Reminder Time</label>
                <!-- Use a normal HTML input instead of InputDate -->
               <input type="datetime-local"
       value="@taskDto.ReminderTime?.ToLocalTime().ToString("yyyy-MM-ddTHH:mm")"
       @onchange="OnReminderChanged"
       style="background: var(--glass-bg); border: 1px solid var(--border-subtle); border-radius: 12px; padding: 0.875rem 1.25rem; color: var(--text-primary); font-size: 1rem; width: 100%;" />

            </div>
        }

        <!-- Submit -->
        <button type="submit"
                style="width: 100%; background: linear-gradient(135deg, var(--accent-success), var(--accent-success-hover)); color: var(--bg-primary); border: none; padding: 1rem 2rem; border-radius: 25px; font-weight: 600; cursor: pointer; transition: all 0.3s var(--ease); box-shadow: var(--shadow-md); font-size: 1.1rem;"
                onmouseover="this.style.transform='translateY(-2px)'; this.style.boxShadow='var(--shadow-lg), 0 0 20px rgba(134, 239, 172, 0.2)'"
                onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='var(--shadow-md)'">
            Add Task
        </button>
    </EditForm>
</div>

@code {
    private TaskCreateDto taskDto = new();
    private int userId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userId = int.Parse(user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? "0");
    }

    private void OnReminderChanged(ChangeEventArgs e)
{
    if (DateTime.TryParse(e.Value?.ToString(), out var local))
    {
        // Convert local → UTC for storage
        taskDto.ReminderTime = DateTime.SpecifyKind(local, DateTimeKind.Local).ToUniversalTime();
    }
}

    private async Task HandleValidSubmit()
    {

            if (taskDto.ReminderTime.HasValue)
{
  
    taskDto.ReminderTime = DateTime.SpecifyKind(
        taskDto.ReminderTime.Value,
        DateTimeKind.Local
    ).ToUniversalTime();
}
       
            try
            {
                taskDto.CreatedAt = DateTime.Now;
                await UserTaskService.CreateTaskAsync(taskDto, userId);
                  await Swal.FireAsync("Task added Successfully");
                Navigation.NavigateTo("/tasks");
            }
            catch (ValidationException)
            {
                
            }
        }
    }

