@page "/auth/register"
@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations
@using Tudu.Application.DTOs
@using Tudu.Application.Interfaces
@inject NavigationManager NavigationManager
@inject IUserService UserService
@using Microsoft.AspNetCore.Components.Forms
@inject IWebHostEnvironment Env
@using FluentValidation
@inject SweetAlertService Swal;

<div class="register-card mt-5" role="region" aria-label="Create account">
    <h3 class="text-center mb-5" style="font-size: 2rem; color: var(--text-primary);">Create Your Account</h3>

    @if (!string.IsNullOrWhiteSpace(Message))
    {
        <div class="register-alert @MessageClass" role="alert" aria-live="polite">
            @Message
        </div>
    }

    <EditForm Model="@registerRequest" method="Post" OnValidSubmit="HandleRegister" FormName="@RegiForm">
        <FluentValidationValidator />
        @* <ValidationSummary style="color: var(--accent-danger); margin-bottom: 1.5rem; font-weight: 500;" /> *@

        <div class="mb-3">
            <label for="email" class="form-label" style="color: var(--text-secondary);">Email</label>
            <InputText id="email" @bind-Value="registerRequest.Email"
                       class="input-custom" placeholder="Enter your email" aria-label="Email" />
            <ValidationMessage For="@(() => registerRequest.Email)" style="color: var(--accent-danger); font-size: 0.875rem;" />
        </div>

        <div class="mb-3">
            <label for="username" class="form-label" style="color: var(--text-secondary);">Username</label>
            <InputText id="username" @bind-Value="registerRequest.UserName"
                       class="input-custom" placeholder="Enter a unique username" aria-label="Username" />
            <ValidationMessage For="@(() => registerRequest.UserName)" style="color: var(--accent-danger); font-size: 0.875rem;" />
        </div>

        <div class="mb-3">
            <label for="password" class="form-label" style="color: var(--text-secondary);">Password</label>
            <InputText id="password" @bind-Value="registerRequest.Password" type="password"
                       class="input-custom" placeholder="Choose a strong password" aria-label="Password" />
            <ValidationMessage For="@(() => registerRequest.Password)" style="color: var(--accent-danger); font-size: 0.875rem;" />
        </div>

      <div class="mb-3">
    <label for="profilePic" class="form-label" style="color: var(--text-secondary);">
        Profile picture (optional)
    </label>

    <!-- Hidden file input -->
    <InputFile id="profilePic"
               class="file-input"
               OnChange="HandleFileSelected"
               accept="image/*"
               aria-label="Upload profile picture" />

    <!-- Styled upload button -->
    <label for="profilePic" class="upload-btn">
        <i class="bi bi-upload"></i> Choose Image
    </label>
</div>


        @if (!string.IsNullOrEmpty(PreviewUrl))
        {
            <div class="mb-3" aria-hidden="false">
                <img src="@PreviewUrl" alt="Preview" class="pfp-img" style="width:150px;height:150px;border-radius:50%;" />
            </div>
        }

        <button type="submit" class="btn-custom btn-primary-custom w-100" disabled="@isLoading" aria-busy="@isLoading" aria-label="Register">
            @if (isLoading)
            {
                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true" style="width:1rem;height:1rem;border-width:0.15rem;"></span>
                <span>Registering...</span>
            }
            else
            {
                <span>Register</span>
            }
        </button>
    </EditForm>

    <div class="text-center mt-3">
        <small style="color: var(--text-muted);">
            Already have an account? <a href="/auth/login" style="color: var(--accent-primary);">Login here</a>
        </small>
    </div>
</div>

@code {
    private const string RegiForm = "Registration-Form";
    private string? PreviewUrl;
    [SupplyParameterFromForm(FormName = RegiForm)]
    private RegisterRequest registerRequest { get; set; } = new();
    private string uploadsDir => Path.Combine(Env.WebRootPath, "uploads");
    private string? Message;
    private string MessageClass = "alert-info";
    private bool isLoading = false;
    private CancellationTokenSource _cts = new();
    private IBrowserFile? uploadedFile;

    private async Task HandleRegister()
    {
        isLoading = true;
        Message = null;

        try
        {
            var result = await UserService.RegisterAsync(registerRequest);

            if (result.Success)
            {
                // Message = " Registered successfully! Redirecting to login...";
                // MessageClass = "alert-success";
                StateHasChanged();
                await Swal.FireAsync("Registered Successfully");

                await Task.Delay(1500, _cts.Token);

                if (!_cts.IsCancellationRequested)
                {
                    NavigationManager.NavigateTo("/auth/login", forceLoad: true);
                }
            }
            else
            {
                Message = result.message ?? " Registration failed. Please check your details.";
                MessageClass = "alert-warning";
            }
        }
        catch (TaskCanceledException)
        {
            // Ignore cancellation due to navigation/disposal
        }
        catch (Exception ex)
        {
            Message = $"Unexpected error: {ex.Message}";
            MessageClass = "alert-danger";
        }
        finally
        {
            isLoading = false;
        }
    }

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }

private async Task HandleFileSelected(InputFileChangeEventArgs e)
{
    try
    {
        var file = e.File;

        // Safety check: file size limit (2 MB)
        if (file.Size > 2_000_000)
        {
            await Swal.FireAsync("Error", "File too large. Please upload under 2 MB.", "error");
            return;
        }

        // Resize image for preview
        var resized = await file.RequestImageFileAsync(file.ContentType, 300, 300);
        var buffer = new byte[resized.Size];
        await resized.OpenReadStream(2_000_000).ReadAsync(buffer);

        PreviewUrl = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";

        // Save file to wwwroot/uploads
        var fileName = $"{Guid.NewGuid()}{Path.GetExtension(file.Name)}";
        var savePath = Path.Combine(uploadsDir, fileName); // uploadsDir from Program.cs

        await using var fs = new FileStream(savePath, FileMode.Create);
        await file.OpenReadStream(2_000_000).CopyToAsync(fs);

        // Store relative path for DB
        registerRequest.ProfilePicturePath = $"/uploads/{fileName}";
    }
    catch (IOException ioEx)
    {
        Console.WriteLine("File system error: " + ioEx.Message);
        await Swal.FireAsync("Error", "Could not save file. Try again.", "error");
    }
    catch (Exception ex)
    {
        Console.WriteLine("Image upload failed: " + ex);
        await Swal.FireAsync("Error", "Unexpected error while uploading image.", "error");
    }
}


}
